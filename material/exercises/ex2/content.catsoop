<catsoop-section>Important</catsoop-section>

- If you are having trouble completing this exercise, please feel free to reference previous labs to see how we've done these calculations before.
Lab 6 has two examples which cover the same content shown here.
- You can use the `print` function in the code blocks below and see the output by hitting the `Run Code` buttons.

<catsoop-section>Fitting Data</catsoop-section>

Suppose we ran an experiment and collected the following data:

`X = np.array([0.009, 0.103, 0.193, 0.330, 0.434, 0.536, 0.646, 0.759, 0.845, 0.946, 1.069, 1.160, 1.275, 1.391, 1.497])`

`Y = np.array([0.382, 0.047, 0.457, -0.046, 0.079, 0.447, 0.721, 1.392, 1.771, 2.223, 3.226, 4.505, 5.962, 7.366, 8.896])`

When plotted, the data looks like this:

<center>
    <img src="CURRENT/observed_expected_output.png"/>
</center>

We know our data should have the form $y = c*x^3$ where $c$ is some constant.
We would like to fit our data to find this constant.

<question pythoncode>
csq_prompt = """
Define a function named `fit_func` which could be plugged into `curve_fit` from the `scipy.optimize` library to find $c$.

(Do not worry about using `curve_fit` in this part.)
"""

csq_initial = """
# Your code here
# Should start with:
# def fit_func...



"""

csq_soln = """
def fit_func(x, c):
    return c*x**3
"""

csq_tests = [
    {'code': 'ans = fit_func(1.23, 3.45)'},
    {'code': 'ans = fit_func(2, 4)'},
    {'code': 'ans = fit_func(3.6, 4.7)'},
    {'code': 'ans = fit_func(5, 10)'},
]
</question>

Now let's use the data that we have, our fit function, and the `curve_fit` function from the `scipy.optimize` library to find the optimal value of $c$.

For the following part, assume that you have access to the following variables:
- `np`: the NumPy library
- `X`: the x data array
- `Y`: the y data array
- `fit_func`: your fit function

Remember to import the other libraries that you need.

<question pythoncode>
csq_prompt = """
Fill in the code below to find the optimal value of $c$.
"""

csq_initial = """
# TODO: Import curve_fit.
popt, pcov = # TODO: Complete this line. Call curve_fit with the correct arguments.
c = popt[0]


"""

csq_code_pre = """
import numpy as np
X = np.array([0.009, 0.103, 0.193, 0.330, 0.434, 0.536, 0.646, 0.759, 0.845, 0.946, 1.069, 1.160, 1.275, 1.391, 1.497])
Y = np.array([0.382, 0.047, 0.457, -0.046, 0.079, 0.447, 0.721, 1.392, 1.771, 2.223, 3.226, 4.505, 5.962, 7.366, 8.896])
def fit_func(x, c):
    return c*x**3
"""

csq_soln = """
from scipy.optimize import curve_fit
popt, pcov = curve_fit(fit_func, X, Y)
c = popt[0]
"""

csq_tests = [
    {'variable': 'c', 'description': 'Test for value of c', 'show_code': False},
]
</question>

Now that we have our optimal value of $c$, we can use it to predict a new set of data based on the X values that we observed and calculate an $R^2$ value on those predictions.

For the following part, assume that you have access to the following variables:
- `np`: the NumPy library
- `X`: the x data array
- `Y`: the y data array
- `c`: the optimal value for $c$
- `fit_func`: your fit function

Remember to import the other libraries that you need.

<question pythoncode>
csq_prompt = """
Write code which creates two variables:
- `Y_pred`: the predicted Y values according to our observed X values and $c$
- `r2`: the $R^2$ score between `Y` and `Y_pred` (calculated using the `r2_score` function from the `sklearn.metrics` library)

"""

csq_initial = """
# Your code here



"""

csq_code_pre = """
import numpy as np
X = np.array([0.009, 0.103, 0.193, 0.330, 0.434, 0.536, 0.646, 0.759, 0.845, 0.946, 1.069, 1.160, 1.275, 1.391, 1.497])
Y = np.array([0.382, 0.047, 0.457, -0.046, 0.079, 0.447, 0.721, 1.392, 1.771, 2.223, 3.226, 4.505, 5.962, 7.366, 8.896])
def fit_func(x, c):
    return c*x**3
c = 2.734
"""

csq_soln = """
Y_pred = fit_func(X, c)

from sklearn.metrics import r2_score
r2 = r2_score(Y, Y_pred)
"""

csq_tests = [
    {'variable': 'list(Y_pred)', 'description': 'Test for value of Y_pred', 'show_code': False},
    {'variable': 'r2', 'description': 'Test for value of r2', 'show_code': False},
]
</question>

<catsoop-section>Data Visualization</catsoop-section>

Finally, let's take all of this these details to make an informative plot!
You can assume that you have access to the following variables:
- `np`: the NumPy library
- `X`: the x data array
- `Y`: the y data array
- `Y_pred`: the predicted y data array
- `c`: the optimal value for $c$
- `r2`: the $R^2$ value between `Y` and `Y_pred`

<center>
    <img src="CURRENT/fit_expected_output.png"/>
</center>

<question mpl>
csq_prompt = """
Recreate the plot above.

- Make a scatter plot of `X` vs. `Y`
    - Label the scatter plot: Observed Data
- Make a line plot of `X` vs. `Y_pred`
    - Make the line orange
    - Use the given `fit_label` as the label
- Title the plot: X vs. Y
- Label the x-axis: X
- Label the y-axis: Y
- Show the legend on the plot

Remember to import `matplotlib.pyplot`!
"""

csq_initial = """
fit_label = f"Fitted Data: c={c:.3f}; R^2={r2:.3f}"

# Your code here

"""

csq_code_pre = """
import matplotlib
matplotlib.use('Agg')

import numpy as np
X = np.array([0.009, 0.103, 0.193, 0.330, 0.434, 0.536, 0.646, 0.759, 0.845, 0.946, 1.069, 1.160, 1.275, 1.391, 1.497])
Y = np.array([0.382, 0.047, 0.457, -0.046, 0.079, 0.447, 0.721, 1.392, 1.771, 2.223, 3.226, 4.505, 5.962, 7.366, 8.896])
Y_pred = np.array([0.000, 0.003, 0.020, 0.098, 0.223, 0.422, 0.736, 1.198, 1.649, 2.312, 3.344, 4.265, 5.666, 7.358, 9.174])
c = 2.734
r2 = 0.994
"""

csq_soln = """
fit_label = f"Fitted Data: c={c:.3f}; R^2={r2:.3f}"

import matplotlib.pyplot as plt
plt.scatter(X, Y, label="Observed Data")
plt.plot(X, Y_pred, color="orange", label=fit_label)
plt.legend()
plt.title("X vs. Y")
plt.xlabel("X")
plt.ylabel("Y")
plt.show()
"""

csq_tests = [
    {'code': 'ans = plt.gca().collections[0].get_offsets().data.T[0].tolist()', 'description': 'Test for scatter plot X values'},
    {'code': 'ans = plt.gca().collections[0].get_offsets().data.T[1].tolist()', 'description': 'Test for scatter plot Y values'},
    {'code': 'ans = plt.gca().get_lines()[0].get_data()[0].tolist()', 'description': 'Test for line plot X values'},
    {'code': 'ans = plt.gca().get_lines()[0].get_data()[1].tolist()', 'description': 'Test for line plot Y values'},
    {'code': 'ans = set(x.get_text() for x in plt.gca().get_legend().texts)', 'description': 'Test for legend labels'},
    {'code': 'ans = plt.gca().get_title()', 'description': 'Test for plot title'},
    {'code': 'ans = plt.gca().get_xlabel()', 'description': 'Test for x label'},
    {'code': 'ans = plt.gca().get_ylabel()', 'description': 'Test for y label'},
]

</question>